app.post(
  "/order",
  authenticateToken,
  upload.single("photo"),
  async (req, res) => {
    const {
      orderType,
      cupcakeCount,
      cupcakeFlavor,
      frostingFlavor,
      fruitToppings,
      flowerDecoration,
      cupcakeDesign,
      cakeSize,
      cakeFlavor,
      cakeFilling,
      cakeDecoration,
      cakeDesign,
      pickupDate,
      pickupOption,
      dietaryRestrictions,
      deliveryAddress,
    } = req.body;

    const photoPath = req.file ? req.file.path : null;

    // Create a detailed description of the order
    const orderDetails = `
      Order Type: ${orderType}
      ${
        orderType === "Cake"
          ? `
        Cake Size: ${cakeSize}
        Cake Flavor: ${cakeFlavor}
        Cake Filling: ${cakeFilling}
        Cake Decoration: ${cakeDecoration}
        Cake Design: ${cakeDesign}
      `
          : `
        Cupcake Count: ${cupcakeCount}
        Cupcake Flavor: ${cupcakeFlavor}
        Frosting Flavor: ${frostingFlavor}
        Fruit Toppings: ${fruitToppings}
        Flower Decoration: ${flowerDecoration}
        Cupcake Design: ${cupcakeDesign}
      `
      }
      Pickup Date: ${pickupDate}
      Pickup Option: ${pickupOption}
      Dietary Restrictions: ${dietaryRestrictions}
      Delivery Address: ${deliveryAddress}
    `;

    // Log all incoming request data for debugging
    console.log("Incoming order data:", {
      user_id: req.user.id,
      orderType,
      cupcakeCount,
      cupcakeFlavor,
      frostingFlavor,
      fruitToppings,
      flowerDecoration,
      cupcakeDesign,
      cakeSize,
      cakeFlavor,
      cakeFilling,
      cakeDecoration,
      cakeDesign,
      pickupDate,
      pickupOption,
      dietaryRestrictions,
      deliveryAddress,
      photoPath,
      orderDetails, // Add orderDetails to the log
    });

    // Check if any required data is missing and log an error if so
    if (!orderType || !pickupDate) {
      console.error("Order type or pickup date is missing");
      return res
        .status(400)
        .send({ error: "Order type and pickup date are required" });
    }

    try {
      const orderNumber = await generateOrderNumber();
      console.log("Generated order number:", orderNumber);

      const result = await pool.query(
        "INSERT INTO orders (user_id, order_details, order_type, cupcake_count, cupcake_flavor, frosting_flavor, fruit_toppings, flower_decoration, cupcake_design, cake_size, cake_flavor, cake_filling, cake_decoration, cake_design, pickup_date, pickup_option, dietary_restrictions, deliveryAddress, photo_path, order_number) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19) RETURNING *",
        [
          req.user.id,
          orderDetails, // Include orderDetails in the insert statement
          orderType,
          cupcakeCount,
          cupcakeFlavor,
          frostingFlavor,
          fruitToppings,
          flowerDecoration,
          cupcakeDesign,
          cakeSize,
          cakeFlavor,
          cakeFilling,
          cakeDecoration,
          cakeDesign,
          new Date(pickupDate),
          pickupOption,
          dietaryRestrictions,
          deliveryAddress,
          photoPath,
          orderNumber,
        ]
      );

      res.status(201).send({ message: "Order created", order: result.rows[0] });
    } catch (error) {
      console.error("Error creating order:", error);
      res.status(500).send({ error: "Internal server error" });
    }
  }
);
